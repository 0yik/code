<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <t t-extend="ClientDetailsEdit">
		<t t-jquery=".client-details-left .client-detail:first" t-operation="before">
			<div class="client-detail">
				<span class="label">Address</span>
				<input class="detail client-address-full" name="street" placeholder="Address" id="autocomplete"/>
			</div>
		</t>
        <t t-jquery="#autocomplete">
			var script = window.document.createElement('script');
			script.innerHTML = `
            var placeSearch, autocomplete;
				  var componentForm = {
					street_number: 'short_name',
					route: 'long_name',
					locality: 'long_name',
					administrative_area_level_1: 'short_name',
					country: 'long_name',
					postal_code: 'short_name'
				  };

				  function initAutocomplete() {
					console.log('initAutocomplete');
					// Create the autocomplete object, restricting the search to geographical
					// location types.
					autocomplete = new google.maps.places.Autocomplete(
						(document.getElementById('autocomplete')),
						{types: ['geocode']});

					// When the user selects an address from the dropdown, populate the address
					// fields in the form.
					autocomplete.addListener('place_changed', fillInAddress);
				  }

				  function fillInAddress() {
					// Get the place details from the autocomplete object.
					var place = autocomplete.getPlace();
			        console.log('Place', place);
					let result = place.address_components;
					if(result){
					$('.client-address-street').val('');
					$('.client-address-city').val('');
					$('.client-address-country').val('');
					$('.client-address-zip').val('');
					for(let i =0; i &lt; result.length; i++){
						if(result[i].types[0] == 'street_number'){
						}
						if(result[i].types[0] == 'route'){
							$('.client-address-street').val(result[i]['long_name']);
						}
						if(result[i].types[0] == 'locality' || result[i].types[0] == 'administrative_area_level_1'){
							$('.client-address-city').val(result[i]['long_name']);
						}
						if(result[i].types[0] == 'country'){
							$('.client-address-country').val($('.client-address-country option:contains("'+ result[i]['long_name'] +'")').val());
						}
						if(result[i].types[0] == 'postal_code'){
							$('.client-address-zip').val(result[i]['long_name']);
						}
					}
					}
				  }

				  // Bias the autocomplete object to the user's geographical location,
				  // as supplied by the browser's 'navigator.geolocation' object.
				  function geolocate() {
					if (navigator.geolocation) {
					  navigator.geolocation.getCurrentPosition(function(position) {
						var geolocation = {
						  lat: position.coords.latitude,
						  lng: position.coords.longitude
						};
						var circle = new google.maps.Circle({
						  center: geolocation,
						  radius: position.coords.accuracy
						});
						autocomplete.setBounds(circle.getBounds());
					  });
					}
				  };
			`;
			$( "body" ).append(script);

                var ga = window.document.createElement('script');
				ga.setAttribute('type', 'text/javascript');
				ga.setAttribute('async', true);
				ga.setAttribute('defer', true);
			    ga.setAttribute("src", 'https://maps.googleapis.com/maps/api/js?key=AIzaSyCmDx-O5RaDUcJsiKgfThsIvaB_VdSl_Ec&amp;libraries=places&amp;callback=initAutocomplete');
                var s = document.getElementsByTagName('script')[0];
                ga.onload = function() {
                  alert("Script loaded and ready");
                };
			$("body" ).append(ga);

        </t>
	</t>
</templates>