odoo.define('pos_rental.custom', function (require) {
"use strict";
var core = require('web.core');
var Model = require('web.Model');
var time = require('web.time');
var utils = require('web.utils');
var models = require('point_of_sale.models');
var SuperOrder = models.Order.prototype;
var screens = require('point_of_sale.screens');
var gui = require('point_of_sale.gui');
var PopupWidget = require('point_of_sale.popups');
var SuperOrder = models.Order.prototype;
var SuperPosModel = models.PosModel.prototype;

var QWeb = core.qweb;
var _t = core._t;

var calendar_flag = true;

models.load_models({
    model: 'res.partner.category',
    fields: ['id','name', 'display_name'],
    loaded: function(self, partner_tags){
        self.db.partner_tags = partner_tags;
    },

});

models.load_fields('res.partner',['category_id'])

screens.ClientListScreenWidget.include({
        get_partner_category_obj: function(id){
            var self = this;
            for(var i=0; i < self.pos.db.partner_tags.length; i++){
                if(id == self.pos.db.partner_tags[i].id){
                    return self.pos.db.partner_tags[i];
                }
            }
        },
        line_select: function(event,$line,id){
            
            var self = this;
            var partner = this.pos.db.get_partner_by_id(id);
            var tags = [];
            for(var i=0; i< partner.category_id.length; i++){
                var obj = self.get_partner_category_obj(partner.category_id[i]);
                if(obj){
                    tags.push(obj);
                }
            }
            var list = [];
                for (var i = 0; i < tags.length; i++) {
                    
                        list.push({
                            'label': tags[i].display_name,
                            'item':  tags[i],
                        });
                   
                }
              if((list.length)>0){
                self.pos.gui.show_popup('selection',{
                      'title':  _t('Tags'),
                      list: list,
                      confirm: function(user){ },
                      cancel:  function(){  },
                  });}
               this._super(event,$line,id);
        },
        
});

var OrderScreenWidget = screens.ScreenWidget.extend({
    template: 'OrderScreenWidget',

    init: function(parent, options){
        this._super(parent, options);
        this.partner_cache = new screens.DomCache();
    },

    auto_back: true,

    show: function(){
        var self = this;
        this._super();

        this.renderElement();
        this.details_visible = false;
        this.old_client = this.pos.get_order().get_client();

        this.$('.back').click(function(){
            self.gui.back();
        });

        var partners = []
        new Model('booking.order').call('search_read', [[], ['id', 'name', 'partner_id', 'date_order', 'amount_total', 'state']]).then(function(result){
            partners = result;
            self.render_list(partners);
        });
        
        this.reload_partners();

        if( this.old_client ){
            this.display_client_details('show',this.old_client,0);
        }

        // this.$('.client-list-contents').delegate('.client-line','click',function(event){
        //     self.line_select(event,$(this),parseInt($(this).data('id')));
        // });
    },
    hide: function () {
        this._super();
        this.new_client = null;
    },
    barcode_client_action: function(code){
        if (this.editing_client) {
            this.$('.detail.barcode').val(code.code);
        } else if (this.pos.db.get_partner_by_barcode(code.code)) {
            var partner = this.pos.db.get_partner_by_barcode(code.code);
            this.new_client = partner;
            this.display_client_details('show', partner);
        }
    },
    perform_search: function(query, associate_result){
        var customers;
        if(query){
            customers = this.pos.db.search_partner(query);
            this.display_client_details('hide');
            if ( associate_result && customers.length === 1){
                this.new_client = customers[0];
                this.save_changes();
                this.gui.back();
            }
            this.render_list(customers);
        }else{
            customers = this.pos.db.get_partners_sorted();
            this.render_list(customers);
        }
    },
    render_list: function(partners){
        var contents = this.$el[0].querySelector('.client-list-contents');
        contents.innerHTML = "";
        for(var i = 0, len = Math.min(partners.length,1000); i < len; i++){
            var partner    = partners[i];
            var clientline = this.partner_cache.get_node(partner.id);
            if(!clientline){
                var clientline_html = QWeb.render('OrderLineBody',{widget: this, partner:partners[i]});
                var clientline = document.createElement('tbody');
                clientline.innerHTML = clientline_html;
                clientline = clientline.childNodes[1];
                this.partner_cache.cache_node(partner.id,clientline);
            }
            if( partner === this.old_client ){
                clientline.classList.add('highlight');
            }else{
                clientline.classList.remove('highlight');
            }
            contents.appendChild(clientline);
        }
    },
    save_changes: function(){
        var self = this;
        var order = this.pos.get_order();
        if( this.has_client_changed() ){
            if ( this.new_client ) {
                order.fiscal_position = _.find(this.pos.fiscal_positions, function (fp) {
                    return fp.id === self.new_client.property_account_position_id[0];
                });
            } else {
                order.fiscal_position = undefined;
            }

            order.set_client(this.new_client);
        }
    },
    has_client_changed: function(){
        if( this.old_client && this.new_client ){
            return this.old_client.id !== this.new_client.id;
        }else{
            return !!this.old_client !== !!this.new_client;
        }
    },
    toggle_save_button: function(){
        var $button = this.$('.button.next');
        if (this.editing_client) {
            $button.addClass('oe_hidden');
            return;
        } else if( this.new_client ){
            if( !this.old_client){
                $button.text(_t('Set Customer'));
            }else{
                $button.text(_t('Change Customer'));
            }
        }else{
            $button.text(_t('Deselect Customer'));
        }
        $button.toggleClass('oe_hidden',!this.has_client_changed());
    },
    // line_select: function(event,$line,id){
    //     var partner = this.pos.db.get_partner_by_id(id);
    //     this.$('.client-list .lowlight').removeClass('lowlight');
    //     if ( $line.hasClass('highlight') ){
    //         $line.removeClass('highlight');
    //         $line.addClass('lowlight');
    //         this.display_client_details('hide',partner);
    //         this.new_client = null;
    //         this.toggle_save_button();
    //     }else{
    //         this.$('.client-list .highlight').removeClass('highlight');
    //         $line.addClass('highlight');
    //         var y = event.pageY - $line.parent().offset().top;
    //         this.display_client_details('show',partner,y);
    //         this.new_client = partner;
    //         this.toggle_save_button();
    //     }
    // },
    partner_icon_url: function(id){
        return '/web/image?model=res.partner&id='+id+'&field=image_small';
    },

    // ui handle for the 'edit selected customer' action
    edit_client_details: function(partner) {
        this.display_client_details('edit',partner);
    },

    // ui handle for the 'cancel customer edit changes' action
    undo_client_details: function(partner) {
        if (!partner.id) {
            this.display_client_details('hide');
        } else {
            this.display_client_details('show',partner);
        }
    },

    // what happens when we save the changes on the client edit form -> we fetch the fields, sanitize them,
    // send them to the backend for update, and call saved_client_details() when the server tells us the
    // save was successfull.
    save_client_details: function(partner) {
        var self = this;
        
        var fields = {};
        this.$('.client-details-contents .detail').each(function(idx,el){
            fields[el.name] = el.value || false;
        });

        if (!fields.name) {
            this.gui.show_popup('error',_t('A Customer Name Is Required'));
            return;
        }
        
        if (this.uploaded_picture) {
            fields.image = this.uploaded_picture;
        }

        fields.id           = partner.id || false;
        fields.country_id   = fields.country_id || false;

        new Model('res.partner').call('create_from_ui',[fields]).then(function(partner_id){
            self.saved_client_details(partner_id);
        },function(err,event){
            event.preventDefault();
            self.gui.show_popup('error',{
                'title': _t('Error: Could not Save Changes'),
                'body': _t('Your Internet connection is probably down.'),
            });
        });
    },
    
    // what happens when we've just pushed modifications for a partner of id partner_id
    saved_client_details: function(partner_id){
        var self = this;
        this.reload_partners().then(function(){
            var partner = self.pos.db.get_partner_by_id(partner_id);
            if (partner) {
                self.new_client = partner;
                self.toggle_save_button();
                self.display_client_details('show',partner);
            } else {
                // should never happen, because create_from_ui must return the id of the partner it
                // has created, and reload_partner() must have loaded the newly created partner. 
                self.display_client_details('hide');
            }
        });
    },

    // resizes an image, keeping the aspect ratio intact,
    // the resize is useful to avoid sending 12Mpixels jpegs
    // over a wireless connection.
    resize_image_to_dataurl: function(img, maxwidth, maxheight, callback){
        img.onload = function(){
            var canvas = document.createElement('canvas');
            var ctx    = canvas.getContext('2d');
            var ratio  = 1;

            if (img.width > maxwidth) {
                ratio = maxwidth / img.width;
            }
            if (img.height * ratio > maxheight) {
                ratio = maxheight / img.height;
            }
            var width  = Math.floor(img.width * ratio);
            var height = Math.floor(img.height * ratio);

            canvas.width  = width;
            canvas.height = height;
            ctx.drawImage(img,0,0,width,height);

            var dataurl = canvas.toDataURL();
            callback(dataurl);
        };
    },

    // Loads and resizes a File that contains an image.
    // callback gets a dataurl in case of success.
    load_image_file: function(file, callback){
        var self = this;
        if (!file.type.match(/image.*/)) {
            this.gui.show_popup('error',{
                title: _t('Unsupported File Format'),
                body:  _t('Only web-compatible Image formats such as .png or .jpeg are supported'),
            });
            return;
        }
        
        var reader = new FileReader();
        reader.onload = function(event){
            var dataurl = event.target.result;
            var img     = new Image();
            img.src = dataurl;
            self.resize_image_to_dataurl(img,800,600,callback);
        };
        reader.onerror = function(){
            self.gui.show_popup('error',{
                title :_t('Could Not Read Image'),
                body  :_t('The provided file could not be read due to an unknown error'),
            });
        };
        reader.readAsDataURL(file);
    },

    // This fetches partner changes on the server, and in case of changes, 
    // rerenders the affected views
    reload_partners: function(){
        var self = this;
        return this.pos.load_new_partners().then(function(){
            self.render_list(self.pos.db.get_partners_sorted(1000));
            
            // update the currently assigned client if it has been changed in db.
            var curr_client = self.pos.get_order().get_client();
            if (curr_client) {
                self.pos.get_order().set_client(self.pos.db.get_partner_by_id(curr_client.id));
            }
        });
    },

    // Shows,hides or edit the customer details box :
    // visibility: 'show', 'hide' or 'edit'
    // partner:    the partner object to show or edit
    // clickpos:   the height of the click on the list (in pixel), used
    //             to maintain consistent scroll.
    display_client_details: function(visibility,partner,clickpos){
        var self = this;
        var contents = this.$('.client-details-contents');
        var parent   = this.$('.client-list').parent();
        var scroll   = parent.scrollTop();
        var height   = contents.height();

        contents.off('click','.button.edit'); 
        contents.off('click','.button.save'); 
        contents.off('click','.button.undo'); 
        contents.on('click','.button.edit',function(){ self.edit_client_details(partner); });
        contents.on('click','.button.save',function(){ self.save_client_details(partner); });
        contents.on('click','.button.undo',function(){ self.undo_client_details(partner); });
        this.editing_client = false;
        this.uploaded_picture = null;

        if(visibility === 'show'){
            contents.empty();
            contents.append($(QWeb.render('ClientDetails',{widget:this,partner:partner})));

            var new_height   = contents.height();

            if(!this.details_visible){
                // resize client list to take into account client details
                parent.height('-=' + new_height);

                if(clickpos < scroll + new_height + 20 ){
                    parent.scrollTop( clickpos - 20 );
                }else{
                    parent.scrollTop(parent.scrollTop() + new_height);
                }
            }else{
                parent.scrollTop(parent.scrollTop() - height + new_height);
            }

            this.details_visible = true;
            this.toggle_save_button();
        } else if (visibility === 'edit') {
            this.editing_client = true;
            contents.empty();
            contents.append($(QWeb.render('ClientDetailsEdit',{widget:this,partner:partner})));
            this.toggle_save_button();

            // Browsers attempt to scroll invisible input elements
            // into view (eg. when hidden behind keyboard). They don't
            // seem to take into account that some elements are not
            // scrollable.
            contents.find('input').blur(function() {
                setTimeout(function() {
                    self.$('.window').scrollTop(0);
                }, 0);
            });

            contents.find('.image-uploader').on('change',function(event){
                self.load_image_file(event.target.files[0],function(res){
                    if (res) {
                        contents.find('.client-picture img, .client-picture .fa').remove();
                        contents.find('.client-picture').append("<img src='"+res+"'>");
                        contents.find('.detail.picture').remove();
                        self.uploaded_picture = res;
                    }
                });
            });
        } else if (visibility === 'hide') {
            contents.empty();
            parent.height('100%');
            if( height > scroll ){
                contents.css({height:height+'px'});
                contents.animate({height:0},400,function(){
                    contents.css({height:''});
                });
            }else{
                parent.scrollTop( parent.scrollTop() - height);
            }
            this.details_visible = false;
            this.toggle_save_button();
        }
    },
    close: function(){
        this._super();
    },
});

gui.define_screen({name:'order_history', widget: OrderScreenWidget});

var FullOrderHistoryButton = screens.ActionButtonWidget.extend({
    template: 'FullOrderHistoryButton',
    button_click: function(){
        var self = this
        self.pos.gui.show_screen('order_history')
        // new Model('pos.order').call('search_read', [[], ['id', 'name']]).then(function(result){
        //     var list = [];
        //     for (var i = 0; i < result.length; i++) {
        //         list.push({
        //             'label': result[i].name,
        //             'item':  result[i],
        //         });
        //     }
        //     self.pos.gui.show_popup('selection', {
        //         'title':  _t('All Orders'),
        //         list: list,
        //         confirm: function(user){ },
        //         cancel:  function(){  },
        //     });
        // });
    },
});

screens.define_action_button({
    'name': 'full_order',
    'widget': FullOrderHistoryButton,
});

var TodayOrderScreenWidget = screens.ScreenWidget.extend({
    template: 'TodayOrderScreenWidget',

    init: function(parent, options){
        this._super(parent, options);
        this.partner_cache = new screens.DomCache();
    },

    auto_back: true,

    show: function(){
        var self = this;
        this._super();

        this.renderElement();
        this.details_visible = false;
        this.old_client = this.pos.get_order().get_client();

        this.$('.back').click(function(){
            self.gui.back();
        });

        var partners = []

        var today = new Date();
        var start_date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + ' ' + '00:00:00'
        var end_date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate() + ' ' + '23:59:59'
        
        new Model('booking.order').call('search_read', [[['def_start_date', '>=', start_date], ['def_end_date', '<=', end_date]], ['id', 'name', 'partner_id', 'date_order', 'amount_total', 'state']]).then(function(result){
            partners = result;
            self.render_list(partners);
        });
        
        this.reload_partners();

        if( this.old_client ){
            this.display_client_details('show',this.old_client,0);
        }

        // this.$('.client-list-contents').delegate('.client-line','click',function(event){
        //     self.line_select(event,$(this),parseInt($(this).data('id')));
        // });
    },
    hide: function () {
        this._super();
        this.new_client = null;
    },
    barcode_client_action: function(code){
        if (this.editing_client) {
            this.$('.detail.barcode').val(code.code);
        } else if (this.pos.db.get_partner_by_barcode(code.code)) {
            var partner = this.pos.db.get_partner_by_barcode(code.code);
            this.new_client = partner;
            this.display_client_details('show', partner);
        }
    },
    perform_search: function(query, associate_result){
        var customers;
        if(query){
            customers = this.pos.db.search_partner(query);
            this.display_client_details('hide');
            if ( associate_result && customers.length === 1){
                this.new_client = customers[0];
                this.save_changes();
                this.gui.back();
            }
            this.render_list(customers);
        }else{
            customers = this.pos.db.get_partners_sorted();
            this.render_list(customers);
        }
    },
    render_list: function(partners){
        var contents = this.$el[0].querySelector('.client-list-contents');
        contents.innerHTML = "";
        for(var i = 0, len = Math.min(partners.length,1000); i < len; i++){
            var partner    = partners[i];
            var clientline = this.partner_cache.get_node(partner.id);
            if(!clientline){
                var clientline_html = QWeb.render('OrderLineBody',{widget: this, partner:partners[i]});
                var clientline = document.createElement('tbody');
                clientline.innerHTML = clientline_html;
                clientline = clientline.childNodes[1];
                this.partner_cache.cache_node(partner.id,clientline);
            }
            if( partner === this.old_client ){
                clientline.classList.add('highlight');
            }else{
                clientline.classList.remove('highlight');
            }
            contents.appendChild(clientline);
        }
    },
    save_changes: function(){
        var self = this;
        var order = this.pos.get_order();
        if( this.has_client_changed() ){
            if ( this.new_client ) {
                order.fiscal_position = _.find(this.pos.fiscal_positions, function (fp) {
                    return fp.id === self.new_client.property_account_position_id[0];
                });
            } else {
                order.fiscal_position = undefined;
            }

            order.set_client(this.new_client);
        }
    },
    has_client_changed: function(){
        if( this.old_client && this.new_client ){
            return this.old_client.id !== this.new_client.id;
        }else{
            return !!this.old_client !== !!this.new_client;
        }
    },
    toggle_save_button: function(){
        var $button = this.$('.button.next');
        if (this.editing_client) {
            $button.addClass('oe_hidden');
            return;
        } else if( this.new_client ){
            if( !this.old_client){
                $button.text(_t('Set Customer'));
            }else{
                $button.text(_t('Change Customer'));
            }
        }else{
            $button.text(_t('Deselect Customer'));
        }
        $button.toggleClass('oe_hidden',!this.has_client_changed());
    },
    // line_select: function(event,$line,id){
    //     var partner = this.pos.db.get_partner_by_id(id);
    //     this.$('.client-list .lowlight').removeClass('lowlight');
    //     if ( $line.hasClass('highlight') ){
    //         $line.removeClass('highlight');
    //         $line.addClass('lowlight');
    //         this.display_client_details('hide',partner);
    //         this.new_client = null;
    //         this.toggle_save_button();
    //     }else{
    //         this.$('.client-list .highlight').removeClass('highlight');
    //         $line.addClass('highlight');
    //         var y = event.pageY - $line.parent().offset().top;
    //         this.display_client_details('show',partner,y);
    //         this.new_client = partner;
    //         this.toggle_save_button();
    //     }
    // },
    partner_icon_url: function(id){
        return '/web/image?model=res.partner&id='+id+'&field=image_small';
    },

    // ui handle for the 'edit selected customer' action
    edit_client_details: function(partner) {
        this.display_client_details('edit',partner);
    },

    // ui handle for the 'cancel customer edit changes' action
    undo_client_details: function(partner) {
        if (!partner.id) {
            this.display_client_details('hide');
        } else {
            this.display_client_details('show',partner);
        }
    },

    // what happens when we save the changes on the client edit form -> we fetch the fields, sanitize them,
    // send them to the backend for update, and call saved_client_details() when the server tells us the
    // save was successfull.
    save_client_details: function(partner) {
        var self = this;
        
        var fields = {};
        this.$('.client-details-contents .detail').each(function(idx,el){
            fields[el.name] = el.value || false;
        });

        if (!fields.name) {
            this.gui.show_popup('error',_t('A Customer Name Is Required'));
            return;
        }
        
        if (this.uploaded_picture) {
            fields.image = this.uploaded_picture;
        }

        fields.id           = partner.id || false;
        fields.country_id   = fields.country_id || false;

        new Model('res.partner').call('create_from_ui',[fields]).then(function(partner_id){
            self.saved_client_details(partner_id);
        },function(err,event){
            event.preventDefault();
            self.gui.show_popup('error',{
                'title': _t('Error: Could not Save Changes'),
                'body': _t('Your Internet connection is probably down.'),
            });
        });
    },
    
    // what happens when we've just pushed modifications for a partner of id partner_id
    saved_client_details: function(partner_id){
        var self = this;
        this.reload_partners().then(function(){
            var partner = self.pos.db.get_partner_by_id(partner_id);
            if (partner) {
                self.new_client = partner;
                self.toggle_save_button();
                self.display_client_details('show',partner);
            } else {
                // should never happen, because create_from_ui must return the id of the partner it
                // has created, and reload_partner() must have loaded the newly created partner. 
                self.display_client_details('hide');
            }
        });
    },

    // resizes an image, keeping the aspect ratio intact,
    // the resize is useful to avoid sending 12Mpixels jpegs
    // over a wireless connection.
    resize_image_to_dataurl: function(img, maxwidth, maxheight, callback){
        img.onload = function(){
            var canvas = document.createElement('canvas');
            var ctx    = canvas.getContext('2d');
            var ratio  = 1;

            if (img.width > maxwidth) {
                ratio = maxwidth / img.width;
            }
            if (img.height * ratio > maxheight) {
                ratio = maxheight / img.height;
            }
            var width  = Math.floor(img.width * ratio);
            var height = Math.floor(img.height * ratio);

            canvas.width  = width;
            canvas.height = height;
            ctx.drawImage(img,0,0,width,height);

            var dataurl = canvas.toDataURL();
            callback(dataurl);
        };
    },

    // Loads and resizes a File that contains an image.
    // callback gets a dataurl in case of success.
    load_image_file: function(file, callback){
        var self = this;
        if (!file.type.match(/image.*/)) {
            this.gui.show_popup('error',{
                title: _t('Unsupported File Format'),
                body:  _t('Only web-compatible Image formats such as .png or .jpeg are supported'),
            });
            return;
        }
        
        var reader = new FileReader();
        reader.onload = function(event){
            var dataurl = event.target.result;
            var img     = new Image();
            img.src = dataurl;
            self.resize_image_to_dataurl(img,800,600,callback);
        };
        reader.onerror = function(){
            self.gui.show_popup('error',{
                title :_t('Could Not Read Image'),
                body  :_t('The provided file could not be read due to an unknown error'),
            });
        };
        reader.readAsDataURL(file);
    },

    // This fetches partner changes on the server, and in case of changes, 
    // rerenders the affected views
    reload_partners: function(){
        var self = this;
        return this.pos.load_new_partners().then(function(){
            self.render_list(self.pos.db.get_partners_sorted(1000));
            
            // update the currently assigned client if it has been changed in db.
            var curr_client = self.pos.get_order().get_client();
            if (curr_client) {
                self.pos.get_order().set_client(self.pos.db.get_partner_by_id(curr_client.id));
            }
        });
    },

    // Shows,hides or edit the customer details box :
    // visibility: 'show', 'hide' or 'edit'
    // partner:    the partner object to show or edit
    // clickpos:   the height of the click on the list (in pixel), used
    //             to maintain consistent scroll.
    display_client_details: function(visibility,partner,clickpos){
        var self = this;
        var contents = this.$('.client-details-contents');
        var parent   = this.$('.client-list').parent();
        var scroll   = parent.scrollTop();
        var height   = contents.height();

        contents.off('click','.button.edit'); 
        contents.off('click','.button.save'); 
        contents.off('click','.button.undo'); 
        contents.on('click','.button.edit',function(){ self.edit_client_details(partner); });
        contents.on('click','.button.save',function(){ self.save_client_details(partner); });
        contents.on('click','.button.undo',function(){ self.undo_client_details(partner); });
        this.editing_client = false;
        this.uploaded_picture = null;

        if(visibility === 'show'){
            contents.empty();
            contents.append($(QWeb.render('ClientDetails',{widget:this,partner:partner})));

            var new_height   = contents.height();

            if(!this.details_visible){
                // resize client list to take into account client details
                parent.height('-=' + new_height);

                if(clickpos < scroll + new_height + 20 ){
                    parent.scrollTop( clickpos - 20 );
                }else{
                    parent.scrollTop(parent.scrollTop() + new_height);
                }
            }else{
                parent.scrollTop(parent.scrollTop() - height + new_height);
            }

            this.details_visible = true;
            this.toggle_save_button();
        } else if (visibility === 'edit') {
            this.editing_client = true;
            contents.empty();
            contents.append($(QWeb.render('ClientDetailsEdit',{widget:this,partner:partner})));
            this.toggle_save_button();

            // Browsers attempt to scroll invisible input elements
            // into view (eg. when hidden behind keyboard). They don't
            // seem to take into account that some elements are not
            // scrollable.
            contents.find('input').blur(function() {
                setTimeout(function() {
                    self.$('.window').scrollTop(0);
                }, 0);
            });

            contents.find('.image-uploader').on('change',function(event){
                self.load_image_file(event.target.files[0],function(res){
                    if (res) {
                        contents.find('.client-picture img, .client-picture .fa').remove();
                        contents.find('.client-picture').append("<img src='"+res+"'>");
                        contents.find('.detail.picture').remove();
                        self.uploaded_picture = res;
                    }
                });
            });
        } else if (visibility === 'hide') {
            contents.empty();
            parent.height('100%');
            if( height > scroll ){
                contents.css({height:height+'px'});
                contents.animate({height:0},400,function(){
                    contents.css({height:''});
                });
            }else{
                parent.scrollTop( parent.scrollTop() - height);
            }
            this.details_visible = false;
            this.toggle_save_button();
        }
    },
    close: function(){
        this._super();
    },
});

gui.define_screen({name:'today_order_history', widget: TodayOrderScreenWidget});

var TodayOrderHistoryButton = screens.ActionButtonWidget.extend({
    template: 'TodayOrderHistoryButton',
    button_click: function(){
        var self = this
        self.pos.gui.show_screen('today_order_history')
        // new Model('pos.order').call('search_read', [[], ['id', 'name']]).then(function(result){
        //     self.pos.gui.show_screen('order_history')
        // });
    },
});

screens.define_action_button({
    'name': 'today_order',
    'widget': TodayOrderHistoryButton,
});

//kunal chavda
for (var i = 0; i < models.length; i++) {
    var model = models[i];
    if (model.model === 'product.product') {
        model.fields.push('is_booking_product');
        model.fields.push('advance_deposit');
        model.fields.push('laundry_buffer');
        model.fields.push('qty_available');
    }
}

var PosOrderSuper = models.Order;
models.Order = models.Order.extend({
	template:'Order',
    initialize: function(attributes, options){
    	var self = this;
    	options = options || {};

    	this.wk_selected_dates = false;
        this.laundry_buffer = 0;
        this.booked_lines = {};
        self.return_date = false;
        self.return_status = '-';
        self.is_return_order = false;
        self.return_order_id = false;
        self.old_order_id = false;
        PosOrderSuper.prototype.initialize.apply(this, arguments);

    },
    add_product: function(product, options){
        //alert('got it'+options);
        var self = this;
        var selectedOrder = self.pos.get('selectedOrder');

        if (options){
            if (options['check']){
                PosOrderSuper.prototype.add_product.call(this, product, options);
            }
            else{
                PosOrderSuper.prototype.add_product.call(this, product, options);
            }
        }
        else{
            if (product.is_booking_product){
                var exists = false;
                var orderLines = selectedOrder.get('orderLines').models;
                if (orderLines.length>0){
                    orderLines.forEach(function(line) {
                        if (line.product.id==product.id){
                            exists = true;
                            alert('You cannot book an item twice!!');
                        }
                    });
                }
                if (!exists){
                    self.pos.pos_widget.screen_selector.show_popup('pos-booking-calendar',product);
                }
            }
            else{
                PosOrderSuper.prototype.add_product.call(this,product, options);
            }
        }

    },
    
    export_as_JSON: function() {
    	console.log('thisssssssssssssssssssss kkkkk', this.pos.get_order());
        var loaded = PosOrderSuper.prototype.export_as_JSON.apply(this, arguments);
        var self = this;
        console.log('\n possssssssssssssssssss', loaded);
        console.log('thisssssssssssssssssssss', this);

        var current_order =  self.pos.get_order();
        if (current_order) {
	        loaded.is_return_order = current_order.is_return_order;
	        loaded.return_status = current_order.return_status;
	        loaded.return_date = current_order.return_date;
	        loaded.return_order_id = current_order.return_order_id;
        }
        loaded.booked_lines = self.booked_lines;  
        loaded.laundry_buffer = self.laundry_buffer;
        loaded.old_order_id = self.old_order_id;

        return loaded;
    },

    set_return_data: function(original_order_id) {
        this.is_return_order = true;
        this.return_order_id = original_order_id;
    },
    set_returned: function(status) {
        this.return_status = status;
    },
    get_return_data: function() {
        return [this.is_return_order || false, this.return_order_id || false, this.return_status || '-'];
    },
});

screens.ProductListWidget.include({
	init: function(parent, options) {
        var self = this;
        this._super(parent,options);
        this.model = options.model;
        this.productwidgets = [];
        this.weight = options.weight || 0;
        this.show_scale = options.show_scale || false;
        this.next_screen = options.next_screen || false;

        this.click_product_handler = function(){
            var product = self.pos.db.get_product_by_id(this.dataset.productId);
            
            this.pos_booking_popup = new PosBookingCalendar(this, {});
            this.pos_booking_popup.appendTo(this.$el);
            this.pos_booking_popup.hide();
            self.pos.gui.show_popup('pos-booking-calendar',{
                product: product,
            });
            
            //options.click_product_action(product);
        };

        this.product_list = options.product_list || [];
        this.product_cache = new screens.DomCache();
    },	
});
var PosBookingCalendar = PopupWidget.extend({
    template:'PosBookingCalendar',

    show: function(product,old_order_id){
        //alert('old_order_id '+product);
        if (this.pos.get('selectedOrder').get_client()){
        }
        else{
            alert('Customer not selected');   
            return; 
        }
        this.renderElement();
        this._super();
        var self = this;
        //alert(JSON.stringify(product));
        (new Model('product.product')).call('get_product_data',[product],{})  
        .then(function (result) {
            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                defaultDate: new Date(),
                selectable: true,
                selectHelper: true,
                
                dayClick: function() {
                    var check = true;
                    var qty = product.qty_available;
                    
                    var selected_date = $(this).attr('data-date');
                    
                    var date = new Date(selected_date);
                    console.log('dattteeeeeeeeeee', date);
                    result.forEach(function(r) {
                    	console.log('starttttttttt', e.start);
                        if (r.end){
                            if (r.start<=date && r.end>=date){
                                qty = qty - r.product_qty
                                if (qty < 1){
                                    check = false;
                                }
                                //alert('Booking already done for this date!!!');
                            }
                        }
                        else{
                            if (_.isEqual(r.start, date)){
                                qty = qty - r.product_qty
                                if (qty < 1){
                                    check = false;
                                }
                                //alert('Booking already done for this date!!!');
                            }
                        }
                    });
                    if (check){
                        var today = new Date().toJSON().slice(0,10);
                        today = new Date(today);
                        if (today-date >0){
                            alert('Booking for past days not allowed!!!');
                        }
                        else{
                            if (qty < 1){
                                alert('Qty available '+qty);
                            }
                            else{
                                self.update_selected(date);
                                //alert('Qty available '+qty);
                                $(this).toggleClass('fc-highlight');
                            }
                        }
                    }
                    else{
                        if (qty < 1){
                            alert('Qty available '+qty);
                        }
                    }
                },
                editable: true,
                eventLimit: true,
                events:result,
            });
        });
        
        this.$('.wk_button_close').off('click').click(function(){
            var selectedOrder = self.pos.get('selectedOrder');
            selectedOrder.wk_selected_dates = false;
            self.gui.close_popup();
        });

        this.$('.wk_button_book').off('click').click(function(){
        	alert("This is for test");
            var date = $('select.wk_top_title').find('option:selected').attr('value');
            self.validate_dates(product, date);
            var selectedOrder = self.pos.get('selectedOrder');
            selectedOrder.wk_selected_dates = false;
            self.gui.close_popup();
            
        });
       
    },
    update_selected: function(date){
        var selectedOrder = this.pos.get('selectedOrder');
        var exists = false;
        if (selectedOrder.wk_selected_dates){
            if (selectedOrder.wk_selected_dates.length>0){
                var selected = selectedOrder.wk_selected_dates;
                selected.forEach(function(d) {
                    if (_.isEqual(d, date)){
                        exists = true;
                        var index = selected.indexOf(d);
                        selected.splice(index, 1);
                    }
                });
                if (!exists){
                    selected.push(date);
                    selectedOrder.wk_selected_dates = selected;
                }
            }else{
               selectedOrder.wk_selected_dates = [date]; 
            }
        }else{
            selectedOrder.wk_selected_dates = [date];
        }
    },
    validate_dates: function(product, laundry_buffer){
        var selectedOrder = this.pos.get('selectedOrder');
        if (selectedOrder.wk_selected_dates){
            if (selectedOrder.wk_selected_dates.length>0){
                var selected = selectedOrder.wk_selected_dates;
                var selected_data = new Array();
                var offset = 0;
                selected.forEach(function(dat) {
                    offset = dat.getTimezoneOffset();
                    var tzDifference = -dat.getTimezoneOffset();
                    dat = new Date(dat.getTime() + tzDifference*60  * 1000);
                    selected_data.push(time.datetime_to_str(dat));
                });
                selected_data.sort();
                var min = selected_data[0];
                var max = selected_data[selected_data.length - 1];
                var min1 = new Date(min);
                var max1 = new Date(max);
                var dd = max1.getDate();
                var mm = max1.getMonth()+1;
                var yyyy = max1.getFullYear();
                var return_date = mm+'/'+dd+'/'+yyyy;
                // console.log(return_date);

                var diff = (((((max1-min1)/1000)/60)/60)/24) +1;
                console.log('\n selectedOrder 111223333', this.pos);
                if (selectedOrder.wk_selected_dates.length==diff){
                    // add to order
                    if (diff==3 || diff== 5 || diff==7){
                        
                            var price = product.price;
                            selectedOrder.booked_lines[product.id] = {'start': min, 'end': max,'product_qty':1, 'laundry_buffer':laundry_buffer}
                            selectedOrder.add_product(product, {quantity:1, 'check': 'check', price:price,merge:false});
                            selectedOrder.return_date = return_date; 
                            selectedOrder.selected_orderline.advance_deposit = product.advance_deposit; 
                            var prod = this.pos.db.get_product_by_id(this.pos.config.advance_product_id[0]);
                            selectedOrder.add_product(prod, {quantity:1, 'check': 'check', price:product.advance_deposit,merge:false});
                            var line = this.pos.get('selectedOrder').getSelectedLine();
                            line.set_quantity(1);
                            calendar_flag= true;

                    }
                    else{
                        alert('Booking allowed for 3, 5 or 7 Consecutive days only!');
                    }
                }
                else{
                    alert('You need to select dates in sequence!');
                }
            }
            else{
               alert('No dates Selected!!!'); 
            }
        }
        else{
            alert('No dates Selected!!!');
        }
    }
}); 
gui.define_popup({name:'pos-booking-calendar', widget: PosBookingCalendar});
//kunal chavda

var PosOrderlineSuper = models.Orderline.prototype;
models.Orderline = models.Orderline.extend({
    template:'Orderline',
    initialize: function(attr,options){
        this.advance_deposit=0.0;
        options['product'] = options['product']['product'];
        console.log("this producttttttttttttttttttt", options['product']);
        PosOrderlineSuper.initialize.apply(this,arguments);
    },
    export_as_JSON: function() {
    	var loaded = PosOrderlineSuper.export_as_JSON.apply(this, arguments);
        loaded.advance_deposit =this.get_product().advance_deposit;
        return loaded;
    },
    set_product_lot: function(product){
    	console.log('\n producttttttttttttttttttt', product);
        this.has_product_lot = false; // product.tracking !== 'none';
        this.pack_lot_lines  = []; //this.has_product_lot && new PacklotlineCollection(null, {'order_line': this});
    },
});

models.PosModel = models.PosModel.extend({
    initialize: function(session, attributes) {
        var rr = SuperPosModel.initialize.call(this,session,attributes);
        var self = this;
        self.models.push(
        {
            model:  'pos.order',
            fields: ['id', 'name', 'date_order', 'partner_id', 'lines', 'pos_reference','is_return_order','return_order_id','return_status', 'return_date', 'order_status', 'returned','collected','laundry','all_done', 'state'],
            domain: function(self){ 
                var domain_list = []
                if (self.config.load_orders_after_this_date) {
                    domain_list = [
                        ['is_return_order', '=', 0],
                        ['date_order', '>', self.config.load_orders_from],
                        ['state', 'not in', ['cancel']]
                    ]
                } else {
                    domain_list = [
                        ['is_return_order', '=', 0],
                        ['session_id', '=', self.pos_session.name],
                        ['state', 'not in', ['cancel']]
                    ]
                }
                return domain_list;
            },
            loaded: function(self, orders){ 
                self.db.pos_all_orders = orders;
            }
        },
        {
            model:  'pos.order.line',
            fields: ['create_date','discount','display_name','id','order_id','price_subtotal','price_subtotal_incl','price_unit','product_id','qty','write_date','start_date','end_date'],
            domain: function(self) {
                var order_lines = []
                var orders = self.db.pos_all_orders;
                for (var i = 0; i < orders.length; i++) {
                    order_lines = order_lines.concat(orders[i]['lines']);
                }
                return [
                    ['id', 'in', order_lines]
                ];
            },
            loaded: function(self, wk_order_lines) {
                self.db.pos_all_order_lines = wk_order_lines;
            },
        });
    },

    push_and_invoice_order: function(order){
        var self = this;
        var invoiced = new $.Deferred(); 

        if(!order.get_client()){
            invoiced.reject('error-no-client');
            return invoiced;
        }

        var order_id = this.db.add_order(order.export_as_JSON());

        this.flush_mutex.exec(function(){
            var done = new $.Deferred(); // holds the mutex
            var transfer = self._flush_orders([self.db.get_order(order_id)], {timeout:30000, to_invoice:true});   
            transfer.fail(function(){
                invoiced.reject('error-transfer');
                done.reject();
            });
            transfer.pipe(function(order_server_id){    
                self.pos_widget.do_action('point_of_sale.pos_invoice_report',{additional_context:{ 
                    //Code chenged for POS All Orders List --START--
                    active_ids:[order_server_id[0].id],
                    //Code chenged for POS All Orders List --END--
                }});

                invoiced.resolve();
                done.resolve();
            });
            return done;
        });
        return invoiced;
    },
