# -*- coding: utf-8 -*-

import base64
from odoo import http, _
from odoo.http import request
from odoo import models,registry, SUPERUSER_ID
from odoo.addons.website_portal.controllers.main import website_account

class FleetRequest(http.Controller):

    @http.route(['/fleet_repair_request_management/fleet_ticket_submitted'], type='http', auth="public", methods=['POST'], website=True)
    def fleet_ticket_submitted(self, **post):
        print 'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy',post
        print 'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy',request.httprequest.form.getlist('service_type')
        service_type = request.httprequest.form.getlist('service_type')
        print 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb',service_type
        cr, uid, context, pool = http.request.cr, http.request.uid, http.request.context, request.env
        Partner = request.env['res.partner'].search([('email', '=', post['email'])])
        print 'cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc',Partner
        if Partner:
            print 'innnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn',Partner
            team_obj = http.request.env['fleet.team']
            team_match = team_obj.sudo().search([('is_team','=', True)], limit=1)
            print 'ttttttttttttttttttttttttttttttttnnnnnnnnnnnnnnnnnnnnnnn',team_match
            support = pool['fleet.request'].sudo().create({
                                                            'subject': post['subject'],
                                                            'team_id' :team_match.id,
                                                            'partner_id' :team_match.leader_id.id,
                                                            'user_id' :team_match.leader_id.id,
                                                            'email': post['email'],
                                                            'phone': post['phone'],
                                                            #for rec in service_type:
                                                                #print 'service ype',rec
                                                            'service_type_ids': [(6, 0, [rec])],
                                                            'description': post['description'],
                                                            'partner_id': Partner.id,
                                                            'year': post['year'],
                                                            'make_id': post['make'],
                                                            'model': post['model'],
                                                            'mileage': post['mileage'],
                                                             })
            print STOP
            values = {
                'support':support
            }
            
            attachment_list = request.httprequest.files.getlist('attachment')
            for image in attachment_list:
                if post.get('attachment'):
                    attachments = {
                               'res_name': image.filename,
                               'res_model': 'fleet.request',
                               'res_id': support,
                               'datas': base64.encodestring(image.read()),
                               'type': 'binary',
                               'datas_fname': image.filename,
                               'name': image.filename,
                           }
                    attachment_obj = http.request.env['ir.attachment']
                    attach = attachment_obj.sudo().create(attachments)
            if len(attachment_list) > 0:
                group_msg = _('Customer has sent %s attachments to this helpdesk ticket. Name of attachments are: ') % (len(attachment_list))
                for attach in attachment_list:
                    group_msg = group_msg + '\n' + attach.filename
                group_msg = group_msg + '\n'  +  '. You can see top attachment menu to download attachments.'
                support.sudo().message_post(body=group_msg,message_type='comment')
                    
            return request.render('fleet_repair_request_management.fleet_thanks_mail_send', values)
        else:
            return request.render('fleet_repair_request_management.fleet_support_invalid',{})
            
            
            
    @http.route(['/page/fleet_support_ticket'], type='http', auth="public",website=True)
    def service_type(self, **kw):
        services = request.env['fleet.service.type'].sudo().search([])
        values = {
            'type_ids': services,
        }
        print 'valueeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',values
        #return http.request.render('website.fleet_support_ticket',values)
        print 'makeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee'
        brand = request.env['fleet.vehicle.model.brand'].sudo().search([])
        values1 = {
            'brand_ids': brand,
        }
        print 'conbimeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',values1 
        model = request.env['fleet.vehicle.model'].sudo().search([])
        print 'deicionarylllllllllllllllllllllllllllll',brand
        values1 = {
            'make_ids': model,
            'brand_ids': brand,
            'type_ids': services,
        }
        print 'conbimeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',values1 
        return http.request.render('website.fleet_support_ticket',values1)
       
    @http.route(['/fleet_repair_request_management/invite'], auth='public', website=True, methods=['POST'])
    def index_user_invite(self, **kw):
        email = kw.get('email')
        name = kw.get('name')
        cr, uid, context, pool = request.cr, request.uid, request.context, request.registry
        user = request.env['res.users'].browse(request.uid)
        user_exist = request.env['res.users'].sudo().search([('login','=',str(email))])
        vals = {
                  'user_id':user_exist,
                }
        if user_exist:
            return http.request.render('fleet_repair_request_management.user_alredy_exist', vals)
        value={
              'name': name,
              'email': email,
              'invitation_date':datetime.date.today(),
              'referrer_user_id':user.id,
              }
        user_info_id = self.create_history(value)
        base_url = http.request.env['ir.config_parameter'].get_param('web.base.url', default='http://localhost:8069') + '/page/website_helpdesk_support_ticket.user_thanks'
        url = "%s?user_info=%s" %(base_url, user_info_id.id)
        reject_url = http.request.env['ir.config_parameter'].get_param('web.base.url', default='http://localhost:8069') + '/page/website_helpdesk_support_ticket.user_thanks_reject'
        rejected_url = "%s?user_info=%s" %(reject_url, user_info_id.id)
        local_context = http.request.env.context.copy()
        issue_template = http.request.env.ref('website_helpdesk_support_ticket.email_template_helpdesk_ticket')
        local_context.update({'user_email': email, 'url': url, 'name':name,'rejected_url':rejected_url})
        issue_template.sudo().with_context(local_context).send_mail(request.uid, force_send=True)
       
    @http.route(['/helpdesk_email/feedback/<int:order_id>'], type='http', auth='public', website=True)
    def feedback_email(self, order_id, **kw):
        values = {}
        values.update({'ticket_id': order_id})
        return request.render("website.helpdesk_feedback", values) 
       
    @http.route(['/helpdesk/feedback/'],
                type='http', auth='public', website=True)
    def start_rating(self, **kw):
        partner_id = kw['partner_id']
        user_id = kw['ticket_id']
        ticket_obj = request.env['helpdesk.support'].browse(int(user_id))
        #if partner_id == UserInput.partner_id.id:
        vals = {
              'rating':kw['star'],
              'comment':kw['comment'],
            }
        ticket_obj.sudo().write(vals)
        customer_msg = _(ticket_obj.partner_id.name + 'has send this feedback rating is %s and comment is %s') % (kw['star'],kw['comment'],)
        ticket_obj.sudo().message_post(body=customer_msg)
        return http.request.render("fleet_repair_request_management.successful_feedback")
            
class website_account(website_account):

    @http.route()
    def account(self, **kw):
        """ Add ticket documents to main account page """
        response = super(website_account, self).account(**kw)
        partner = request.env.user.partner_id
        ticket = request.env['helpdesk.support']
        ticket_count = ticket.sudo().search_count([
        ('partner_id', 'child_of', [partner.commercial_partner_id.id])
          ])
        response.qcontext.update({
        'ticket_count': ticket_count,
        })
        return response
        
    @http.route(['/my/tickets', '/my/tickets/page/<int:page>'], type='http', auth="user", website=True)
    def portal_my_ticket(self, page=1, **kw):
        response = super(website_account, self)
        values = self._prepare_portal_layout_values()
        partner = request.env.user.partner_id
        support_obj = http.request.env['helpdesk.support']
        domain = [
            ('partner_id', 'child_of', [partner.commercial_partner_id.id])
        ]
        # count for pager
        ticket_count = support_obj.sudo().search_count(domain)
        # pager
        pager = request.website.pager(
            url="/my/tickets",
            total=ticket_count,
            page=page,
            step=self._items_per_page
        )
        # content according to pager and archive selected
        tickets = support_obj.sudo().search(domain, limit=self._items_per_page, offset=pager['offset'])
        values.update({
            'tickets': tickets,
            'page_name': 'ticket',
            'pager': pager,
            'default_url': '/my/tickets',
        })
        return request.render("website_helpdesk_support_ticket.display_tickets", values)
       
    @http.route(['/my/ticket/<model("helpdesk.support"):ticket>'], type='http', auth="user", website=True)
    def my_ticket(self, ticket=None, **kw):
        attachment_list = request.httprequest.files.getlist('attachment')
        support_obj = http.request.env['helpdesk.support'].sudo().browse(ticket.id)
        for image in attachment_list:
            if kw.get('attachment'):
                attachments = {
                           'res_name': image.filename,
                           'res_model': 'helpdesk.support',
                           'res_id': ticket.id,
                           'datas': base64.encodestring(image.read()),
                           'type': 'binary',
                           'datas_fname': image.filename,
                           'name': image.filename,
                       }
                attachment_obj = http.request.env['ir.attachment']
                attachment_obj.sudo().create(attachments)
        if len(attachment_list) > 0:
            group_msg = _('Customer has sent %s attachments to this helpdesk ticket. Name of attachments are: ') % (len(attachment_list))
            for attach in attachment_list:
                group_msg = group_msg + '\n' + attach.filename
            group_msg = group_msg + '\n'  +  '. You can see top attachment menu to download attachments.'
            support_obj.sudo().message_post(body=group_msg,message_type='comment')
            customer_msg = _('%s') % (kw.get('ticket_comment'))
            support_obj.sudo().message_post(body=customer_msg,message_type='comment')
            return http.request.render('website_helpdesk_support_ticket.successful_ticket_send',{
            })
        if kw.get('ticket_comment'):
            customer_msg = _('%s') % (kw.get('ticket_comment'))
            support_obj.sudo().message_post(body=customer_msg,message_type='comment')
            return http.request.render('website_helpdesk_support_ticket.successful_ticket_send',{
            })
        return request.render("website_helpdesk_support_ticket.display_ticket", {'ticket': ticket, 'user': request.env.user})
        
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
